openapi: 3.0.1
info:
  description: Swagger definition for One More Tick application
  version: 1.0.0
  title: One moret tick API
tags: []
paths:
  /register:
    post:
      tags:
        - auth
      summary: Add a new user
      description: ''
      operationId: registerUser
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
        description: User to be created
        required: true
      responses:
        '201':
          description: Created User
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Bad request
  /login:
    post:
      tags:
        - auth
      summary: Login user
      description: ''
      operationId: loginUser
      parameters:
        - name: email
          in: query
          description: email of user
          required: true
          schema:
            type: string
            format: email
        - name: password
          in: query
          description: password of user
          required: true
          schema:
            type: string
            format: password
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
          description: Ok
        '400':
          description: Bad request
        '404':
          description: User not found
  /change_pass:
    put:
      tags:
        - auth
      summary: Updates user's password
      description: ''
      operationId: updateUser
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
        description: User object that needs to be updated
        required: true
      responses:
        '201':
          description: Updated User
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Bad request
        '404':
          description: User not found

  /tasks/{user_id}:
    post:
      tags:
        - tasks
      summary: Add a task
      description: ''
      operationId: addTask
      parameters:
        - name: user_id
          in: path
          description: user id
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Task'
        description: Object that needs to be used for creating a new task
        required: true
      responses:
        '201':
          description: Created task
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Task'
        '400':
          description: Bad request
    get:
      tags:
        - tasks
      summary: Find all user's tasks
      description: Returns a list of tasks
      operationId: getTasks
      parameters:
        - name: user_id
          in: path
          description: user id
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Tasks'
          description: Ok
        '400':
          description: Bad request
    put:
      tags:
        - tasks
      summary: Update task
      description: ''
      operationId: updateTask
      parameters:
        - name: user_id
          in: path
          description: user id
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Task'
        description: Object that needs to be updated
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Task'
          description: Ok
        '400':
          description: Bad request
        '404':
          description: Task not found

  /tasks/{user_id}/{task_id}:
    get:
      tags:
        - tasks
      summary: Find task by id
      description: ''
      operationId: getTaskById
      parameters:
        - name: user_id
          in: path
          description: user id
          required: true
          schema:
            type: integer
            format: int64
        - name: task_id
          in: path
          description: task id
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Task'
          description: Ok
        '400':
          description: Bad request
        '404':
          description: Task not found
    delete:
      tags:
        - tasks
      summary: Delete task
      description: ''
      operationId: deteleTask
      parameters:
        - name: user_id
          in: path
          description: user id
          required: true
          schema:
            type: integer
            format: int64
        - name: task_id
          in: path
          description: task id
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Task'
          description: Ok
        '400':
          description: Bad request
        '404':
          description: Task not found

  /lists/{user_id}:
    post:
      tags:
        - lists
      summary: Add a list
      description: ''
      operationId: addList
      parameters:
        - name: user_id
          in: path
          description: user id
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/List'
        description: Object that needs to be used for creating a new list
        required: true
      responses:
        '201':
          description: Created list
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/List'
        '400':
          description: Bad request
    get:
      tags:
        - lists
      summary: Find all user's list
      description: Returns a list of lists
      operationId: getLists
      parameters:
        - name: user_id
          in: path
          description: user id
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Lists'
          description: Ok
        '400':
          description: Bad request
    put:
      tags:
        - lists
      summary: Update list
      description: ''
      operationId: updateList
      parameters:
        - name: user_id
          in: path
          description: user id
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/List'
        description: Object that needs to be updated
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/List'
          description: Ok
        '400':
          description: Bad request
        '404':
          description: List not found

  /lists/{user_id}/{list_id}:
    get:
      tags:
        - lists
      summary: Find list by id
      description: ''
      operationId: getListById
      parameters:
        - name: user_id
          in: path
          description: user id
          required: true
          schema:
            type: integer
            format: int64
        - name: list_id
          in: path
          description: list id
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/List'
          description: Ok
        '400':
          description: Bad request
        '404':
          description: List not found
    delete:
      tags:
        - lists
      summary: Delete list
      description: ''
      operationId: deteleList
      parameters:
        - name: user_id
          in: path
          description: user id
          required: true
          schema:
            type: integer
            format: int64
        - name: list_id
          in: path
          description: task id
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/List'
          description: Ok
        '400':
          description: Bad request
        '404':
          description: List not found
  /lists/{user_id}/{list_id}/items:
    post:
      tags:
        - items
      summary: Add item to list
      description: ''
      operationId: addItemList
      parameters:
        - name: user_id
          in: path
          description: user id
          required: true
          schema:
            type: integer
            format: int64
        - name: list_id
          in: path
          description: list id
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ItemList'
        description: Object that needs to be used for creating a new item
        required: true
      responses:
        '201':
          description: Created item
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ItemList'
        '400':
          description: Bad request
    get:
      tags:
        - items
      summary: Get items for list
      description: ''
      operationId: getListItems
      parameters:
        - name: user_id
          in: path
          description: user id
          required: true
          schema:
            type: integer
            format: int64
        - name: list_id
          in: path
          description: list id
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Items'
          description: Ok
        '400':
          description: Bad request
        '404':
          description: List not found
    put:
      tags:
        - items
      summary: Update item list
      description: ''
      operationId: updateItemList
      parameters:
        - name: user_id
          in: path
          description: user id
          required: true
          schema:
            type: integer
            format: int64
        - name: list_id
          in: path
          description: list id
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ItemList'
        description: Object that needs to be updated
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ItemList'
          description: Ok
        '400':
          description: Bad request
        '404':
          description: Item not found
  /lists/{user_id}/{list_id}/items/{item_id}:
    get:
      tags:
        - items
      summary: Find item by id
      description: ''
      operationId: getItemListById
      parameters:
        - name: user_id
          in: path
          description: user id
          required: true
          schema:
            type: integer
            format: int64
        - name: list_id
          in: path
          description: list id
          required: true
          schema:
            type: integer
            format: int64
        - name: item_id
          in: path
          description: list id
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ItemList'
          description: Ok
        '400':
          description: Bad request
        '404':
          description: Item not found
    delete:
      tags:
        - items
      summary: Delete item from list
      description: ''
      operationId: deteleItemList
      parameters:
        - name: user_id
          in: path
          description: user id
          required: true
          schema:
            type: integer
            format: int64
        - name: list_id
          in: path
          description: task id
          required: true
          schema:
            type: integer
            format: int64
        - name: item_id
          in: path
          description: list id
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ItemList'
          description: Ok
        '400':
          description: Bad request
        '404':
          description: Item not found

  /categories:
    get:
      tags:
        - categories
      summary: Find all categories
      description: Returns a list of categories
      operationId: getCategories
      parameters: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Categories'
          description: Ok
        '400':
          description: Bad request

  /categories/{category_id}:
    get:
      tags:
        - categories
      summary: Find category by id
      description: ''
      operationId: getCategoryById
      parameters:
        - name: category_id
          in: path
          description: category id
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Category'
          description: Ok
        '400':
          description: Bad request
        '404':
          description: Category not found
components:
  schemas:
    User:
      type: object
      properties:
        id:
          type: integer
          format: int64
        email:
          type: string
          format: email
          minLength: 3
          maxLength: 45
        password:
          type: string
          format: password
          minLength: 6
          maxLength: 45
    Tasks:
      type: array
      items:
        $ref: '#/components/schemas/Task'
    Task:
      type: object
      properties:
        id:
          type: integer
          format: int64
        title:
          type: string
          minLength: 3
          maxLength: 45
        descriprion:
          type: string
          nullable: true
          minLength: 3
          maxLength: 100
        startDate:
          type: string
          format: date
        endDate:
          type: string
          format: date
        idOpen:
          type: boolean
        categoryId:
          type: integer
          format: int64
        userId:
          type: integer
          format: int64
    Categories:
      type: array
      items:
        $ref: '#/components/schemas/Category'
    Category:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
          minLength: 3
          maxLength: 45
    Lists:
      type: array
      items:
        $ref: '#/components/schemas/List'
    List:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
          minLength: 3
          maxLength: 45
        userId:
          type: integer
          format: int64
    Items:
      type: array
      items:
        $ref: '#/components/schemas/ItemList'
    ItemList:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
          minLength: 3
          maxLength: 45
        listId:
          type: integer
          format: int64